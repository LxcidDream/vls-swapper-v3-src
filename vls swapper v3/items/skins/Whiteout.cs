using vls_swapper_v3.Properties;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using vls_swapper_v3;
using System.IO;
using System.Windows.Forms;
using vls_swapper_v3.main.popups;
using System.Globalization;
using vls_swapper_v3.IO;
using MaterialSkin;
using MaterialSkin.Controls;

namespace vls_swapper_v3.Skins
{
	// Token: 0x02000031 RID: 49
	public partial class Whiteout : MaterialForm
	{
		// Token: 0x06000400 RID: 1024 RVA: 0x0003A49C File Offset: 0x0003869C
		public Whiteout()
		{
			this.InitializeComponent(); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon)); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon));
			this.skinManager.AddFormToManage(this);
			this.skinManager.Theme = MaterialSkinManager.Themes.DARK;
			bool flag = Settings.Default.ismode;
			bool flag2 = flag;
			bool enabledmode = !Settings.Default.ismode; if (enabledmode) { skinManager.ColorScheme = new ColorScheme(Primary.DeepPurple500, Primary.Grey900, Primary.Grey900, Accent.DeepPurple400, TextShade.WHITE); } else { skinManager.ColorScheme = new ColorScheme(Primary.Pink500, Primary.Grey900, Primary.Grey900, Accent.Pink400, TextShade.WHITE); }
			this.Text = "Whiteout";
			MessageBox.Show("This skin uses Catalyst [Tier1], be sure to select this style to use the Whiteout skin!");
			bool whiteoutEnabled = Settings.Default.WhiteoutEnabled;
			bool flag3 = whiteoutEnabled;
			if (flag3)
			{
				this.revert.Enabled = true;
				this.convert.Enabled = false;
			}
			else
			{
				this.revert.Enabled = false;
				this.convert.Enabled = true;
			}

		}

		// Token: 0x06000401 RID: 1025 RVA: 0x0003A63A File Offset: 0x0003883A
		private void bunifuImageButton4_Click_1(object sender, EventArgs e)
		{
			base.Close();
		}

		// Token: 0x06000402 RID: 1026 RVA: 0x0003A644 File Offset: 0x00038844
		private void panel1_MouseMove(object sender, MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left;
			if (flag)
			{
				base.Left += e.X - this.lastPoint.X;
				base.Top += e.Y - this.lastPoint.Y;
			}
		}

		// Token: 0x06000403 RID: 1027 RVA: 0x0003A6A5 File Offset: 0x000388A5
		private void panel1_MouseDown(object sender, MouseEventArgs e)
		{
			this.lastPoint = new Point(e.X, e.Y);
		}

		// Token: 0x06000404 RID: 1028 RVA: 0x0003A6C0 File Offset: 0x000388C0
		private void label5_MouseMove(object sender, MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left;
			if (flag)
			{
				base.Left += e.X - this.lastPoint.X;
				base.Top += e.Y - this.lastPoint.Y;
			}
		}

		// Token: 0x06000405 RID: 1029 RVA: 0x0003A721 File Offset: 0x00038921
		private void label5_MouseDown(object sender, MouseEventArgs e)
		{
			this.lastPoint = new Point(e.X, e.Y);
		}

		// Token: 0x06000406 RID: 1030 RVA: 0x0003A73C File Offset: 0x0003893C
		private void RevertBytes_DoWork(object sender, DoWorkEventArgs e)
		{
			Control.CheckForIllegalCrossThreadCalls = false;
			int offsetskin = Settings.Default.offsetskin1;
			int offsetpick = Settings.Default.offsetpick;
			int offsetback = Settings.Default.offsetback;
			int offsetskin2 = Settings.Default.offsetskin2;
			int offsetemote = Settings.Default.offsetemote;
			int offsetlobby = Settings.Default.offsetlobby;
			int offsetpickmesh = Settings.Default.offsetpickmesh;
			bool cancellationPending = this.revert1Bytes.CancellationPending;
			if (cancellationPending)
			{
				e.Cancel = true;
			}
			else
			{
				this.revert.Enabled = false;
				this.RichTextBoxInfo.Text = "";
				RichTextBox richTextBoxInfo = this.RichTextBoxInfo;
				richTextBoxInfo.Text += "[LOG] Starting...";
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
				string path2 = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
				Stream stream = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream, 0, (long)offsetskin, Whiteout.Body1))
				{
					stream.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(Whiteout.Body);
					binaryWriter.Close();
					Settings.Default.WhiteoutEnabled = false;
					Settings.Default.Save();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body 1/2 removed!";
				}
				for (int i = 0; i < 4; i++)
				{
					Stream stream2 = File.OpenRead(path);
					foreach (long offset2 in Researcher.FindPosition(stream2, 0, (long)offsetskin, Whiteout.BodyAnim1))
					{
						stream2.Close();
						BinaryWriter binaryWriter2 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
						binaryWriter2.BaseStream.Seek(offset2, SeekOrigin.Begin);
						binaryWriter2.Write(Whiteout.BodyAnim);
						binaryWriter2.Close();
						this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body Anim removed! [" + i.ToString() + "]";
					}
				}
				Stream stream3 = File.OpenRead(path2);
				foreach (long offset3 in Researcher.FindPosition(stream3, 0, (long)offsetskin2, Whiteout.Head1))
				{
					stream3.Close();
					BinaryWriter binaryWriter3 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter3.BaseStream.Seek(offset3, SeekOrigin.Begin);
					binaryWriter3.Write(Whiteout.Head);
					binaryWriter3.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head 1/3 removed!";
				}
				Stream stream4 = File.OpenRead(path2);
				foreach (long offset4 in Researcher.FindPosition(stream4, 0, (long)offsetskin2, Whiteout.HeadAnim1))
				{
					stream4.Close();
					BinaryWriter binaryWriter4 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter4.BaseStream.Seek(offset4, SeekOrigin.Begin);
					binaryWriter4.Write(Whiteout.HeadAnim);
					binaryWriter4.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head 2/3 removed!";
				}
				Stream stream5 = File.OpenRead(path2);
				foreach (long num in Researcher.FindPosition(stream5, 0, (long)offsetskin2, Whiteout.FaceAcc1))
				{
					stream5.Close();
					BinaryWriter binaryWriter5 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
					long offset5 = num + 267L;
					long num2 = num + 554L;
					long offset6 = num + 835L;
					binaryWriter5.BaseStream.Seek(offset5, SeekOrigin.Begin);
					binaryWriter5.Write(Whiteout.HairNone);
					binaryWriter5.BaseStream.Seek(offset6, SeekOrigin.Begin);
					binaryWriter5.Write(Whiteout.FaceSwap);
					binaryWriter5.BaseStream.Seek(num, SeekOrigin.Begin);
					binaryWriter5.Write(Whiteout.FaceAcc);
					binaryWriter5.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head 3/3 removed!";
				}
				

				this.revert.Enabled = false;
				this.convert.Enabled = true;
				stopwatch.Stop();
				double num3 = (double)stopwatch.Elapsed.Seconds;
				this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Done!";
			}
		}

		// Token: 0x06000407 RID: 1031 RVA: 0x0003ACE4 File Offset: 0x00038EE4
		private void ChangeBytes_DoWork(object sender, DoWorkEventArgs e)
		{
			CheckForIllegalCrossThreadCalls = false;

			if (Settings.Default.ChaosAgentEnabled)
			{
				MetroFramework.MetroMessageBox.Show(this, "Chaos Agent" + actsomewhelse, error, MessageBoxButtons.OK, MessageBoxIcon.Error, 100);
				return;
			}












			Control.CheckForIllegalCrossThreadCalls = false;
			int offsetskin = Settings.Default.offsetskin1;
			int offsetpick = Settings.Default.offsetpick;
			int offsetback = Settings.Default.offsetback;
			int offsetskin2 = Settings.Default.offsetskin2;
			int offsetemote = Settings.Default.offsetemote;
			int offsetlobby = Settings.Default.offsetlobby;
			int offsetpickmesh = Settings.Default.offsetpickmesh;
			this.convert.Enabled = false;
			this.RichTextBoxInfo.Text = "";
			RichTextBox richTextBoxInfo = this.RichTextBoxInfo;
			richTextBoxInfo.Text += "[LOG] Starting...";
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
			string path2 = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
			Stream stream = File.OpenRead(path2);
			foreach (long offset in Researcher.FindPosition(stream, 0, (long)offsetskin, Whiteout.Body))
			{
				stream.Close();
				BinaryWriter binaryWriter = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
				binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
				binaryWriter.Write(Whiteout.Body1);
				binaryWriter.Close();
				Settings.Default.WhiteoutEnabled = true;
				Settings.Default.Save();
				this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body 1/2 added!";
			}
			for (int i = 0; i < 4; i++)
			{
				Stream stream2 = File.OpenRead(path2);
				foreach (long offset2 in Researcher.FindPosition(stream2, 0, (long)offsetskin, Whiteout.BodyAnim))
				{
					stream2.Close();
					BinaryWriter binaryWriter2 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter2.BaseStream.Seek(offset2, SeekOrigin.Begin);
					binaryWriter2.Write(Whiteout.BodyAnim1);
					binaryWriter2.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body Anim added! [" + i.ToString() + "]";
				}
			}
			Stream stream3 = File.OpenRead(path);
			foreach (long offset3 in Researcher.FindPosition(stream3, 0, (long)offsetskin2, Whiteout.Head))
			{
				stream3.Close();
				BinaryWriter binaryWriter3 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
				binaryWriter3.BaseStream.Seek(offset3, SeekOrigin.Begin);
				binaryWriter3.Write(Whiteout.Head1);
				binaryWriter3.Close();
				this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head 1/3 added!";
			}
			Stream stream4 = File.OpenRead(path);
			foreach (long offset4 in Researcher.FindPosition(stream4, 0, (long)offsetskin2, Whiteout.HeadAnim))
			{
				stream4.Close();
				BinaryWriter binaryWriter4 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
				binaryWriter4.BaseStream.Seek(offset4, SeekOrigin.Begin);
				binaryWriter4.Write(Whiteout.HeadAnim1);
				binaryWriter4.Close();
				this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head 2/3 added!";
			}
			Stream stream5 = File.OpenRead(path);
			foreach (long num in Researcher.FindPosition(stream5, 0, (long)offsetskin2, Whiteout.FaceAcc))
			{
				stream5.Close();
				BinaryWriter binaryWriter5 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
				long offset5 = num + 267L;
				long num2 = num + 554L;
				long offset6 = num + 835L;
				binaryWriter5.BaseStream.Seek(offset5, SeekOrigin.Begin);
				binaryWriter5.Write(Whiteout.HairNone1);
				binaryWriter5.BaseStream.Seek(offset6, SeekOrigin.Begin);
				binaryWriter5.Write(Whiteout.FaceSwap1);
				binaryWriter5.BaseStream.Seek(num, SeekOrigin.Begin);
				binaryWriter5.Write(Whiteout.FaceAcc1);
				binaryWriter5.Close();
				this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head 3/3 added!";
			}
			string file = Options.GetPaksFolder + "\\pakchunk0-WindowsClient.pak";
			

			this.revert.Enabled = true;
			this.convert.Enabled = false;
			stopwatch.Stop();
			double num3 = (double)stopwatch.Elapsed.Seconds;
			RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Done";

		}

		// Token: 0x06000408 RID: 1032 RVA: 0x0003B318 File Offset: 0x00039518
		private void convert_Click(object sender, EventArgs e)
		{
			string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
			bool flag = !File.Exists(path);
			if (flag)
			{
				paks paks = new paks();
				paks.ShowDialog();
			}
			else
			{
				
				
				
					Control.CheckForIllegalCrossThreadCalls = false;
					int offsetskin = Settings.Default.offsetskin1;
					int offsetpick = Settings.Default.offsetpick;
					int offsetback = Settings.Default.offsetback;
					int offsetskin2 = Settings.Default.offsetskin2;
					int offsetemote = Settings.Default.offsetemote;
					int offsetlobby = Settings.Default.offsetlobby;
					int offsetpickmesh = Settings.Default.offsetpickmesh;
					this.change1Bytes.RunWorkerAsync();
				
			}
		}

		// Token: 0x06000409 RID: 1033 RVA: 0x0003B3E8 File Offset: 0x000395E8
		private void revert_Click(object sender, EventArgs e)
		{
			string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
			bool flag = !File.Exists(path);
			if (flag)
			{
				paks paks = new paks();
				paks.ShowDialog();
			}
			else
			{
				Control.CheckForIllegalCrossThreadCalls = false;
				int offsetskin = Settings.Default.offsetskin1;
				int offsetpick = Settings.Default.offsetpick;
				int offsetback = Settings.Default.offsetback;
				int offsetskin2 = Settings.Default.offsetskin2;
				int offsetemote = Settings.Default.offsetemote;
				int offsetlobby = Settings.Default.offsetlobby;
				int offsetpickmesh = Settings.Default.offsetpickmesh;
				this.revert1Bytes.RunWorkerAsync();
			}
		}

		// Token: 0x0600040A RID: 1034 RVA: 0x0003B48B File Offset: 0x0003968B
		private void RichTextBoxInfo_TextChanged(object sender, EventArgs e)
		{
		}

		// Token: 0x04000387 RID: 903
		private Point lastPoint;

		// Token: 0x04000388 RID: 904
		private CultureInfo culture = CultureInfo.CurrentUICulture;

		// Token: 0x04000389 RID: 905
		private string enable = Resources.enabled;

		// Token: 0x0400038A RID: 906
		private string disabled = Resources.disabled;

		// Token: 0x0400038B RID: 907
		private string actsomewhelse = Resources.alreadydone;

		// Token: 0x0400038C RID: 908
		private string paksinvalid = Resources.pathinvalid;

		// Token: 0x0400038D RID: 909
		private string error = Resources.error;

		// Token: 0x0400038E RID: 910
		private MaterialSkinManager skinManager = MaterialSkinManager.Instance;

		// Token: 0x0400038F RID: 911
		private static byte[] Body = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120
		};

		// Token: 0x04000390 RID: 912
		private static byte[] Body1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			87,
			104,
			105,
			116,
			101,
			95,
			48,
			49,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			87,
			104,
			105,
			116,
			101,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			87,
			104,
			105,
			116,
			101,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000391 RID: 913
		private static byte[] BodyAnim = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67
		};

		// Token: 0x04000392 RID: 914
		private static byte[] BodyAnim1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			87,
			104,
			105,
			116,
			101,
			95,
			48,
			49,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			87,
			104,
			105,
			116,
			101,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			87,
			104,
			105,
			116,
			101,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000393 RID: 915
		private static byte[] Head = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99
		};

		// Token: 0x04000394 RID: 916
		private static byte[] Head1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			49
		};

		// Token: 0x04000395 RID: 917
		private static byte[] HeadAnim = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			84,
			49,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			84,
			49,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67
		};

		// Token: 0x04000396 RID: 918
		private static byte[] HeadAnim1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			84,
			49,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			82,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			84,
			49,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			49
		};

		// Token: 0x04000397 RID: 919
		private static byte[] FaceAcc = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			116,
			114,
			101,
			101,
			116,
			95,
			82,
			97,
			99,
			101,
			114,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			97,
			116,
			101,
			114,
			105,
			97,
			108,
			115,
			47,
			77,
			95,
			70,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			72,
			101,
			97,
			100,
			95,
			84,
			49,
			46,
			77,
			95,
			70,
			95,
			68,
			114,
			105,
			102,
			116,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			72,
			101,
			97,
			100,
			95,
			84,
			49
		};

		// Token: 0x04000398 RID: 920
		private static byte[] FaceAcc1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			83,
			117,
			109,
			109,
			101,
			114,
			47,
			68,
			101,
			109,
			111,
			47,
			77,
			97,
			116,
			101,
			114,
			105,
			97,
			108,
			115,
			47,
			77,
			95,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			97,
			114,
			97,
			104,
			95,
			72,
			97,
			105,
			114,
			95,
			48,
			49,
			46,
			77,
			95,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			97,
			114,
			97,
			104,
			95,
			72,
			97,
			105,
			114,
			95,
			48,
			49,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000399 RID: 921
		private static byte[] HairNone = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			72,
			101,
			97,
			100,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			47,
			77,
			97,
			116,
			101,
			114,
			105,
			97,
			108,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			95,
			72,
			97,
			105,
			114,
			78,
			111,
			110,
			101,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			95,
			72,
			97,
			105,
			114,
			78,
			111,
			110,
			101
		};

		// Token: 0x0400039A RID: 922
		private static byte[] HairNone1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			72,
			101,
			97,
			100,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			47,
			77,
			97,
			116,
			101,
			114,
			105,
			97,
			108,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			95,
			72,
			97,
			105,
			114,
			78,
			111,
			110,
			101,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			95,
			72,
			97,
			105,
			114,
			78,
			111,
			110,
			49
		};

		// Token: 0x0400039B RID: 923
		private static byte[] FaceSwap = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			72,
			101,
			97,
			100,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			50,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			116,
			97,
			114,
			102,
			105,
			115,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			50
		};

		// Token: 0x0400039C RID: 924
		private static byte[] FaceSwap1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			72,
			101,
			97,
			100,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			97,
			114,
			97,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			97,
			114,
			97,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			65,
			83,
			78,
			95,
			83,
			97,
			114,
			97,
			104,
			95,
			72,
			101,
			97,
			100,
			95,
			48,
			49,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		
		private string CID = "CID_486_Athena_Commando_F_StreetRacerDrift.CID_486_Athena_Commando_F_StreetRacerDrift";

		
		private string CID1 = "CID_188_Athena_Commando_F_StreetRacerWhite.CID_188_Athena_Commando_F_StreetRacerWhite";

	}
}
