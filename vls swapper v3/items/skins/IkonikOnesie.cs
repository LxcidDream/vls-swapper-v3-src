using vls_swapper_v3.Properties;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Globalization;
using vls_swapper_v3.IO;
using vls_swapper_v3;
using MaterialSkin;
using MaterialSkin.Controls;
using vls_swapper_v3.main.popups;
using MetroFramework;

namespace vls_swapper_v3.Skins
{
    public partial class IkonikOnesie : MaterialForm
    {

        Point lastPoint;
        CultureInfo culture = CultureInfo.CurrentUICulture;
        string enable = Resources.enabled;
        string disabled = Resources.disabled;
        string actsomewhelse = Resources.alreadydone;
        string paksinvalid = Resources.pathinvalid;
        string error = Resources.error;
        MaterialSkinManager skinManager = MaterialSkinManager.Instance;
        public IkonikOnesie()
        {
            InitializeComponent(); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon)); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon));
            skinManager.AddFormToManage(this);
            skinManager.Theme = MaterialSkinManager.Themes.DARK;
            bool enabledmode =! Settings.Default.ismode;if (enabledmode){skinManager.ColorScheme = new ColorScheme(Primary.DeepPurple500, Primary.Grey900, Primary.Grey900, Accent.DeepPurple400, TextShade.WHITE);}else{skinManager.ColorScheme = new ColorScheme(Primary.Pink500, Primary.Grey900, Primary.Grey900, Accent.Pink400, TextShade.WHITE);}

            this.Text = "Ikonik";
            MessageBox.Show("This skin uses normal Onesie, be sure to select this style before swapping Dynamo!");
            bool enabled = Settings.Default.IkonikOnesieEnabled;
            if (enabled)
            {
                revert.Enabled = true;
                convert.Enabled = false;
            }
            else
            {
                revert.Enabled = false;
                convert.Enabled = true;

            }

            
        }

        private void bunifuImageButton4_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Left += e.X - lastPoint.X;
                this.Top += e.Y - lastPoint.Y;
            }
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            lastPoint = new Point(e.X, e.Y);
        }

        private void label5_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Left += e.X - lastPoint.X;
                this.Top += e.Y - lastPoint.Y;
            }
        }

        private void label5_MouseDown(object sender, MouseEventArgs e)
        {
            lastPoint = new Point(e.X, e.Y);
        }

        private static byte[] HeadPart = new byte[133]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
70,
101,
109,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
66,
111,
100,
105,
101,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
47,
77,
101,
115,
104,
101,
115,
47,
80,
97,
114,
116,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
72,
101,
97,
100,
46,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
72,
101,
97,
100
        };
        private static byte[] HeadPart1 = new byte[133]
        {
      47,
71,
97,
109,
101,
47,
65,
99,
99,
101,
115,
115,
111,
114,
105,
101,
115,
47,
72,
97,
116,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
95,
72,
97,
116,
47,
77,
101,
115,
104,
101,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
95,
70,
97,
99,
101,
65,
99,
99,
46,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
95,
70,
97,
99,
101,
65,
99,
99,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
        };

        private static byte[] HeadMesh = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
70,
101,
109,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
72,
101,
97,
100,
115,
47,
70,
95,
77,
69,
68,
95,
67,
65,
85,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
95,
80,
74,
95,
72,
101,
97,
100,
95,
48,
49,
47,
77,
101,
115,
104,
101,
115,
47,
70,
95,
77,
69,
68,
95,
67,
65,
85,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
95,
80,
74,
95,
72,
101,
97,
100,
95,
48,
49,
46,
70,
95,
77,
69,
68,
95,
67,
65,
85,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
95,
80,
74,
95,
72,
101,
97,
100,
95,
48,
49,
        };
        private static byte[] HeadMesh1 = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
77,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
72,
101,
97,
100,
115,
47,
77,
95,
77,
69,
68,
95,
67,
65,
85,
95,
77,
105,
107,
101,
95,
72,
101,
97,
100,
95,
48,
49,
47,
77,
101,
115,
104,
101,
115,
47,
77,
95,
77,
69,
68,
95,
67,
65,
85,
95,
77,
105,
107,
101,
95,
72,
101,
97,
100,
95,
48,
49,
46,
77,
95,
77,
69,
68,
95,
67,
65,
85,
95,
77,
105,
107,
101,
95,
72,
101,
97,
100,
95,
48,
49,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
        };

        private static byte[] HeadMeshBP = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
70,
101,
109,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
66,
111,
100,
105,
101,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
47,
77,
101,
115,
104,
101,
115,
47,
80,
97,
114,
116,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
72,
101,
97,
100,
95,
65,
110,
105,
109,
66,
80,
46,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
72,
101,
97,
100,
95,
65,
110,
105,
109,
66,
80,
95,
67,
        };

        private static byte[] HeadMeshBP1 = new byte[]
        {
      47,
71,
97,
109,
101,
47,
65,
99,
99,
101,
115,
115,
111,
114,
105,
101,
115,
47,
72,
97,
116,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
95,
72,
97,
116,
47,
77,
101,
115,
104,
101,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
95,
70,
97,
99,
101,
65,
99,
99,
95,
65,
110,
105,
109,
66,
80,
46,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
95,
70,
97,
99,
101,
65,
99,
99,
95,
65,
110,
105,
109,
66,
80,
95,
67,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
        };

        private static byte[] BodyMeshBP = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
70,
101,
109,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
66,
111,
100,
105,
101,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
47,
77,
101,
115,
104,
101,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
66,
111,
100,
121,
95,
65,
110,
105,
109,
66,
80,
46,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
66,
111,
100,
121,
95,
65,
110,
105,
109,
66,
80,
95,
67,
        };
        private static byte[] BodyMeshBP1 = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
77,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
66,
111,
100,
105,
101,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
70,
97,
115,
104,
105,
111,
110,
47,
77,
101,
115,
104,
101,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
65,
110,
105,
109,
66,
80,
46,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
65,
110,
105,
109,
66,
80,
95,
67,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
        };

        private static byte[] BodyMesh = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
70,
101,
109,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
66,
111,
100,
105,
101,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
47,
77,
101,
115,
104,
101,
115,
47,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
66,
111,
100,
121,
46,
70,
95,
77,
69,
68,
95,
68,
117,
114,
114,
98,
117,
114,
103,
101,
114,
80,
74,
115,
95,
48,
49,
95,
66,
111,
100,
121,
        };
        private static byte[] BodyMesh1 = new byte[]
        {
      47,
71,
97,
109,
101,
47,
67,
104,
97,
114,
97,
99,
116,
101,
114,
115,
47,
80,
108,
97,
121,
101,
114,
47,
77,
97,
108,
101,
47,
77,
101,
100,
105,
117,
109,
47,
66,
111,
100,
105,
101,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
70,
97,
115,
104,
105,
111,
110,
47,
77,
101,
115,
104,
101,
115,
47,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
46,
77,
95,
77,
69,
68,
95,
75,
112,
111,
112,
95,
70,
97,
115,
104,
105,
111,
110,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
        };

        private static byte[] CID = new byte[]
        {
            69,
            70,
            111,
            114,
            116,
            67,
            117,
            115,
            116,
            111,
            109,
            71,
            101,
            110,
            100,
            101,
            114,
            58,
            58,
            70,
            101,
            109,
            97,
            108,
            101
        };

        // Token: 0x0400043F RID: 1087
        private static byte[] CID1 = new byte[]
        {
            69,
            70,
            111,
            114,
            116,
            67,
            117,
            115,
            116,
            111,
            109,
            71,
            101,
            110,
            100,
            101,
            114,
            58,
            58,
            70,
            101,
            109,
            97,
            49,
            101
        };

        private void RevertBytes_DoWork(object sender, DoWorkEventArgs e)
        {
            Control.CheckForIllegalCrossThreadCalls = false;
            int offsetskin = Settings.Default.offsetskin1;
            int offsetpick = Settings.Default.offsetpick;
            int offsetback = Settings.Default.offsetback;
            int offsetskin2 = Settings.Default.offsetskin2;
            int offsetemote = Settings.Default.offsetemote;
            int offsetlobby = Settings.Default.offsetlobby;
            int offsetpickmesh = Settings.Default.offsetpickmesh;
            bool cancellationPending = this.revert1Bytes.CancellationPending;
            if (cancellationPending)
            {
                e.Cancel = true;
            }
            else
            {
                this.revert.Enabled = false;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
                string path2 = Options.GetPaksFolder + "\\pakchunk10_s3-WindowsClient.pak";
                this.RichTextBoxInfo.Text = "";
                RichTextBox richTextBoxInfo = this.RichTextBoxInfo;
                richTextBoxInfo.Text += "[LOG] Starting...";
                Stream stream = File.OpenRead(path);
                foreach (long num in Researcher.FindPosition(stream, 0, (long)offsetskin, IkonikOnesie.BodyMesh1))
                {
                    stream.Close();
                    BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
                    binaryWriter.BaseStream.Seek(num, SeekOrigin.Begin);
                    binaryWriter.Write(IkonikOnesie.BodyMesh);
                    long offset = num + 940L;
                    binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
                    binaryWriter.Write(IkonikOnesie.CID);
                    binaryWriter.Close();
                    RichTextBox richTextBoxInfo2 = this.RichTextBoxInfo;
                    richTextBoxInfo2.Text += "\n[LOG] Body removed!";
                }
                Stream stream2 = File.OpenRead(path2);
                foreach (long offset2 in Researcher.FindPosition(stream2, 0, (long)offsetskin2, IkonikOnesie.HeadPart1))
                {
                    stream2.Close();
                    BinaryWriter binaryWriter2 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
                    binaryWriter2.BaseStream.Seek(offset2, SeekOrigin.Begin);
                    binaryWriter2.Write(IkonikOnesie.HeadPart);
                    binaryWriter2.Close();
                }
                Stream stream3 = File.OpenRead(path2);
                foreach (long offset3 in Researcher.FindPosition(stream3, 0, (long)offsetskin2, IkonikOnesie.HeadMesh1))
                {
                    stream3.Close();
                    BinaryWriter binaryWriter3 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
                    binaryWriter3.BaseStream.Seek(offset3, SeekOrigin.Begin);
                    binaryWriter3.Write(IkonikOnesie.HeadMesh);
                    binaryWriter3.Close();
                    Settings.Default.IkonikOnesieEnabled = false;
                    Settings.Default.Save();
                    this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head removed!";
                }
                Stream stream4 = File.OpenRead(path2);
                foreach (long offset4 in Researcher.FindPosition(stream4, 0, (long)offsetskin2, IkonikOnesie.HeadMeshBP1))
                {
                    stream4.Close();
                    BinaryWriter binaryWriter4 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
                    binaryWriter4.BaseStream.Seek(offset4, SeekOrigin.Begin);
                    binaryWriter4.Write(IkonikOnesie.HeadMeshBP);
                    binaryWriter4.Close();
                }
                Stream stream5 = File.OpenRead(path);
                foreach (long offset5 in Researcher.FindPosition(stream5, 0, (long)offsetskin, IkonikOnesie.BodyMeshBP1))
                {
                    stream5.Close();
                    BinaryWriter binaryWriter5 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
                    binaryWriter5.BaseStream.Seek(offset5, SeekOrigin.Begin);
                    binaryWriter5.Write(IkonikOnesie.BodyMeshBP);
                    binaryWriter5.Close();
                    this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body removed!";
                }
                this.revert.Enabled = false;
                this.convert.Enabled = true;
                stopwatch.Stop();
                double num2 = (double)stopwatch.Elapsed.Seconds;
                this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Done!";
            }

        }

        private void ChangeBytes_DoWork(object sender, DoWorkEventArgs e)
        {
            Control.CheckForIllegalCrossThreadCalls = false;
            int offsetskin = Settings.Default.offsetskin1;
            int offsetpick = Settings.Default.offsetpick;
            int offsetback = Settings.Default.offsetback;
            int offsetskin2 = Settings.Default.offsetskin2;
            int offsetemote = Settings.Default.offsetemote;
            int offsetlobby = Settings.Default.offsetlobby;
            int offsetpickmesh = Settings.Default.offsetpickmesh;
            bool dynamoEnabled = Settings.Default.DynamoEnabled;
            if (dynamoEnabled)
            {
                MetroMessageBox.Show(this, "dynamo" + this.actsomewhelse, this.error, MessageBoxButtons.OK, MessageBoxIcon.Hand, 100);
            }
            else
            {
                bool waypointEnabled = Settings.Default.WaypointEnabled;
                if (waypointEnabled)
                {
                    MetroMessageBox.Show(this, "Waypoint" + this.actsomewhelse, this.error, MessageBoxButtons.OK, MessageBoxIcon.Hand, 100);
                }
                else
                {
                    bool harlwyquinnenabled = Settings.Default.harlwyquinnenabled;
                    if (harlwyquinnenabled)
                    {
                        MetroMessageBox.Show(this, "harley quinn" + this.actsomewhelse, this.error, MessageBoxButtons.OK, MessageBoxIcon.Hand, 100);
                    }
                    else
                    {
                        this.convert.Enabled = false;
                        this.RichTextBoxInfo.Text = "";
                        RichTextBox richTextBoxInfo = this.RichTextBoxInfo;
                        richTextBoxInfo.Text += "[LOG] Starting...";
                        Stopwatch stopwatch = new Stopwatch();
                        stopwatch.Start();
                        string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
                        string path2 = Options.GetPaksFolder + "\\pakchunk10_s3-WindowsClient.pak";
                        this.RichTextBoxInfo.Text = "";
                        RichTextBox richTextBoxInfo2 = this.RichTextBoxInfo;
                        richTextBoxInfo2.Text += "[LOG] Starting...";
                        Stream stream = File.OpenRead(path);
                        foreach (long num in Researcher.FindPosition(stream, 0, (long)offsetskin, IkonikOnesie.BodyMesh))
                        {
                            stream.Close();
                            BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
                            binaryWriter.BaseStream.Seek(num, SeekOrigin.Begin);
                            binaryWriter.Write(IkonikOnesie.BodyMesh1);
                            long offset = num + 940L;
                            binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
                            binaryWriter.Write(IkonikOnesie.CID1);
                            binaryWriter.Close();
                            RichTextBox richTextBoxInfo3 = this.RichTextBoxInfo;
                            richTextBoxInfo3.Text += "\n[LOG] Body added!";
                        }
                        Stream stream2 = File.OpenRead(path);
                        foreach (long offset2 in Researcher.FindPosition(stream2, 0, (long)offsetskin2, IkonikOnesie.HeadPart))
                        {
                            stream2.Close();
                            BinaryWriter binaryWriter2 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
                            binaryWriter2.BaseStream.Seek(offset2, SeekOrigin.Begin);
                            binaryWriter2.Write(IkonikOnesie.HeadPart1);
                            binaryWriter2.Close();
                            Settings.Default.IkonikOnesieEnabled = true;
                            Settings.Default.Save();
                        }
                        Stream stream3 = File.OpenRead(path);
                        foreach (long offset3 in Researcher.FindPosition(stream3, 0, (long)offsetskin2, IkonikOnesie.HeadMesh))
                        {
                            stream3.Close();
                            BinaryWriter binaryWriter3 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
                            binaryWriter3.BaseStream.Seek(offset3, SeekOrigin.Begin);
                            binaryWriter3.Write(IkonikOnesie.HeadMesh1);
                            binaryWriter3.Close();
                        }
                        Stream stream4 = File.OpenRead(path);
                        foreach (long offset4 in Researcher.FindPosition(stream4, 0, (long)offsetskin2, IkonikOnesie.HeadMeshBP))
                        {
                            stream4.Close();
                            BinaryWriter binaryWriter4 = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
                            binaryWriter4.BaseStream.Seek(offset4, SeekOrigin.Begin);
                            binaryWriter4.Write(IkonikOnesie.HeadMeshBP1);
                            binaryWriter4.Close();
                            this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head added!";
                        }
                        Stream stream5 = File.OpenRead(path2);
                        foreach (long offset5 in Researcher.FindPosition(stream5, 0, (long)offsetskin, IkonikOnesie.BodyMeshBP))
                        {
                            stream5.Close();
                            BinaryWriter binaryWriter5 = new BinaryWriter(File.Open(path2, FileMode.Open, FileAccess.ReadWrite));
                            binaryWriter5.BaseStream.Seek(offset5, SeekOrigin.Begin);
                            binaryWriter5.Write(IkonikOnesie.BodyMeshBP1);
                            binaryWriter5.Close();
                            this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body added!";
                        }
                        this.revert.Enabled = true;
                        this.convert.Enabled = false;
                        stopwatch.Stop();
                        double num2 = (double)stopwatch.Elapsed.Seconds;
                        this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Done!";
                    }
                }
            }
        }

        private void convert_Click(object sender, EventArgs e)
        {
            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            if (!File.Exists(filePath))
            {
                paks a = new paks(); a.ShowDialog();
                return;
            }
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
            change1Bytes.RunWorkerAsync();
        }

        private void revert_Click(object sender, EventArgs e)
        {
            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            if (!File.Exists(filePath))
            {
                paks a = new paks(); a.ShowDialog();
                return;
            }
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
            revert1Bytes.RunWorkerAsync();
        }
    }
}
