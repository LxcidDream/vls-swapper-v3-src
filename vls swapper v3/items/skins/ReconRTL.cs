using vls_swapper_v3.Properties;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using vls_swapper_v3.main.popups;
using System.Globalization;
using vls_swapper_v3.IO;
using MaterialSkin;
using MaterialSkin.Controls;

namespace vls_swapper_v3.items.skins
{
    public partial class ReconRTL : MaterialForm
    {
        Point lastPoint;
        CultureInfo culture = CultureInfo.CurrentUICulture;
        string enable = Resources.enabled;
        string disabled = Resources.disabled;
        string actsomewhelse = Resources.alreadydone;
        string paksinvalid = Resources.pathinvalid;
        string error = Resources.error;
        MaterialSkinManager skinManager = MaterialSkinManager.Instance;
        public ReconRTL()
        {
            InitializeComponent(); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon)); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon));
            skinManager.AddFormToManage(this);
            skinManager.Theme = MaterialSkinManager.Themes.DARK;
            bool enabledmode = !Settings.Default.ismode; if (enabledmode) { skinManager.ColorScheme = new ColorScheme(Primary.DeepPurple500, Primary.Grey900, Primary.Grey900, Accent.DeepPurple400, TextShade.WHITE); } else { skinManager.ColorScheme = new ColorScheme(Primary.Pink500, Primary.Grey900, Primary.Grey900, Accent.Pink400, TextShade.WHITE); }
            this.Text = "Recon Expert";
            bool enabled = Settings.Default.ReconRTLEnabled;
            if (enabled)
            {
                revert.Enabled = true;
                convert.Enabled = false;
            }
            else
            {
                revert.Enabled = false;
                convert.Enabled = true;

            }
        }

        private void RevertBytes_DoWork(object sender, DoWorkEventArgs e)
        {
            Control.CheckForIllegalCrossThreadCalls = false;
            int offsetskin = Settings.Default.offsetskin1;
            int offsetback = Settings.Default.offsetback;
            int offsetskin2 = Settings.Default.offsetskin2;
            int offsetlobby = Settings.Default.offsetlobby;
            bool cancellationPending = this.revert1Bytes.CancellationPending;
            if (cancellationPending)
            {
                e.Cancel = true;
            }
            else
            {
                this.revert.Enabled = false;
                this.RichTextBoxInfo.Text = "";
                RichTextBox richTextBoxInfo = this.RichTextBoxInfo;
                richTextBoxInfo.Text += "[LOG] Starting...";
                string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
                string path2 = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
                string path3 = Options.GetPaksFolder + "\\pakchunk0-WindowsClient.pak";

                Stream stream = File.OpenRead(path3);
                foreach (long offset in Researcher.FindPosition(stream, 0, (long)offsetlobby, ReconRTL.byte_0))
                {
                    stream.Close();
                    BinaryWriter binaryWriter = new BinaryWriter(File.Open(path3, FileMode.Open, FileAccess.ReadWrite));
                    binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
                    binaryWriter.Write(ReconRTL.byte_1);
                    binaryWriter.Close();
                    this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] CID Removed!";
                }

				Stream stream1 = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream1, 0, (long)offsetskin2, ReconRTL.byte_6))
				{
					stream1.Close();
					Settings.Default.ReconRTLEnabled = false;
					Settings.Default.Save();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_7);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Hat Removed!";
				}

				Stream stream2 = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream2, 0, (long)offsetskin2, ReconRTL.byte_4))
				{
					stream.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_5);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head Removed!";
				}

				Stream stream3 = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream3, 0, (long)offsetskin, ReconRTL.byte_2))
				{
					stream3.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_3);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] body Removed!";
				}
			}
			this.revert.Enabled = false;
			this.convert.Enabled = true;
			RichTextBoxInfo.Text += "\n[LOG] Done";
		}

		private void change1Bytes_DoWork(object sender, DoWorkEventArgs e)
		{
			Control.CheckForIllegalCrossThreadCalls = false;
			int offsetskin = Settings.Default.offsetskin1;
			int offsetback = Settings.Default.offsetback;
			int offsetskin2 = Settings.Default.offsetskin2;
			int offsetlobby = Settings.Default.offsetlobby;
			bool cancellationPending = this.revert1Bytes.CancellationPending;
			if (cancellationPending)
			{
				e.Cancel = true;
			}
			else
			{
				convert.Enabled = false;
				this.RichTextBoxInfo.Text = "";
				RichTextBox richTextBoxInfo = this.RichTextBoxInfo;
				richTextBoxInfo.Text += "[LOG] Starting...";
				string path = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
				string path2 = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";
				string path3 = Options.GetPaksFolder + "\\pakchunk0-WindowsClient.pak";

				Stream stream = File.OpenRead(path3);
				foreach (long offset in Researcher.FindPosition(stream, 0, (long)offsetlobby, ReconRTL.byte_1))
				{
					stream.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path3, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_0);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] CID added!";
				}

				Stream stream1 = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream1, 0, (long)offsetskin2, ReconRTL.byte_7))
				{
					stream1.Close();
					Settings.Default.ReconRTLEnabled = true;
					Settings.Default.Save();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_6);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Hat added!";
				}

				Stream stream2 = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream2, 0, (long)offsetskin2, ReconRTL.byte_5))
				{
					stream.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_4);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head added!";
				}

				Stream stream3 = File.OpenRead(path);
				foreach (long offset in Researcher.FindPosition(stream3, 0, (long)offsetskin, ReconRTL.byte_3))
				{
					stream3.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(path, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(ReconRTL.byte_2);
					binaryWriter.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] body added!";
				}
				convert.Enabled = false;
				revert.Enabled = true;
				RichTextBoxInfo.Text += "\n[LOG] Done!";
			}
		}




















		private static byte[] byte_0 = new byte[]
{
		47,
		71,
		97,
		109,
		101,
		47,
		65,
		116,
		104,
		101,
		110,
		97,
		47,
		73,
		116,
		101,
		109,
		115,
		47,
		67,
		111,
		115,
		109,
		101,
		116,
		105,
		99,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		73,
		68,
		95,
		48,
		50,
		50,
		95,
		65,
		116,
		104,
		101,
		110,
		97,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		70,
		46,
		67,
		73,
		68,
		95,
		48,
		50,
		50,
		95,
		65,
		116,
		104,
		101,
		110,
		97,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		70,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
};

		// Token: 0x04000ABF RID: 2751
		private static byte[] byte_1 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		65,
		116,
		104,
		101,
		110,
		97,
		47,
		73,
		116,
		101,
		109,
		115,
		47,
		67,
		111,
		115,
		109,
		101,
		116,
		105,
		99,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		73,
		68,
		95,
		48,
		57,
		54,
		95,
		65,
		116,
		104,
		101,
		110,
		97,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		70,
		95,
		70,
		111,
		117,
		110,
		100,
		101,
		114,
		46,
		67,
		73,
		68,
		95,
		48,
		57,
		54,
		95,
		65,
		116,
		104,
		101,
		110,
		97,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		70,
		95,
		70,
		111,
		117,
		110,
		100,
		101,
		114
		};

		// Token: 0x04000AC0 RID: 2752
		private static byte[] byte_2 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		115,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		84,
		86,
		49,
		49,
		0,
		203,
		66,
		134,
		4,
		69,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		97,
		115,
		101,
		47,
		83,
		75,
		95,
		77,
		95,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		66,
		97,
		115,
		101,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		0,
		100,
		205,
		113,
		128,
		95,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		97,
		115,
		101,
		47,
		83,
		75,
		95,
		77,
		95,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		66,
		97,
		115,
		101,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		46,
		83,
		75,
		95,
		77,
		95,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		66,
		97,
		115,
		101,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		0,
		211,
		180,
		18,
		27,
		86,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		0,
		62,
		99,
		223,
		70,
		103,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		46,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		0,
		30,
		191,
		47,
		134,
		102,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		95,
		65,
		110,
		105,
		109,
		66,
		80,
		0,
		88,
		94,
		162,
		58,
		137,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		95,
		65,
		110,
		105,
		109,
		66,
		80,
		46,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		95,
		65,
		110,
		105,
		109,
		66,
		80,
		95,
		67,
		0,
		112,
		160,
		67,
		146,
		109,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		83,
		107,
		105,
		110,
		115,
		47,
		84,
		86,
		95,
		49,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		66,
		111,
		100,
		121,
		95,
		84,
		86,
		49,
		49,
		0,
		221,
		87,
		137,
		213,
		134,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		83,
		107,
		105,
		110,
		115,
		47,
		84,
		86,
		95,
		49,
		52,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		66,
		111,
		100,
		121,
		95,
		84,
		86,
		49,
		52,
		46,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		66,
		111,
		100,
		121,
		95,
		84,
		86,
		49,
		52
		};

		// Token: 0x04000AC1 RID: 2753
		private static byte[] byte_3 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		115,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		84,
		86,
		49,
		49,
		0,
		203,
		66,
		134,
		4,
		69,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		97,
		115,
		101,
		47,
		83,
		75,
		95,
		77,
		95,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		66,
		97,
		115,
		101,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		0,
		100,
		205,
		113,
		128,
		95,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		97,
		115,
		101,
		47,
		83,
		75,
		95,
		77,
		95,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		66,
		97,
		115,
		101,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		46,
		83,
		75,
		95,
		77,
		95,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		66,
		97,
		115,
		101,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		0,
		211,
		180,
		18,
		27,
		86,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		0,
		62,
		99,
		223,
		70,
		103,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		46,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		0,
		30,
		191,
		47,
		134,
		102,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		95,
		65,
		110,
		105,
		109,
		66,
		80,
		0,
		88,
		94,
		162,
		58,
		137,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		95,
		65,
		110,
		105,
		109,
		66,
		80,
		46,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		95,
		83,
		107,
		101,
		108,
		101,
		116,
		111,
		110,
		95,
		65,
		110,
		105,
		109,
		66,
		80,
		95,
		67,
		0,
		112,
		160,
		67,
		146,
		109,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		83,
		107,
		105,
		110,
		115,
		47,
		84,
		86,
		95,
		49,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		66,
		111,
		100,
		121,
		95,
		84,
		86,
		49,
		49,
		0,
		221,
		87,
		137,
		213,
		134,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		66,
		111,
		100,
		105,
		101,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		83,
		111,
		108,
		100,
		105,
		101,
		114,
		95,
		48,
		49,
		47,
		83,
		107,
		105,
		110,
		115,
		47,
		84,
		86,
		95,
		49,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		66,
		111,
		100,
		121,
		95,
		84,
		86,
		49,
		49,
		46,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		66,
		111,
		100,
		121,
		95,
		84,
		86,
		49,
		49
		};

		// Token: 0x04000AC2 RID: 2754
		private static byte[] byte_4 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		67,
		111,
		108,
		111,
		114,
		83,
		119,
		97,
		116,
		99,
		104,
		101,
		115,
		47,
		83,
		107,
		105,
		110,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		66,
		76,
		75,
		46,
		70,
		95,
		77,
		101,
		100,
		95,
		66,
		76,
		75,
		0,
		167,
		232,
		113,
		89,
		71,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		115,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		95,
		84,
		86,
		49,
		49,
		0,
		182,
		250,
		152,
		111,
		93,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		72,
		97,
		105,
		114,
		95,
		84,
		86,
		49,
		49,
		0,
		49,
		174,
		97,
		197,
		118,
		0,
		0,
		0,
		47,
		48,
		48,
		48,
		48,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		72,
		97,
		105,
		114,
		95,
		84,
		86,
		49,
		49,
		46,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		72,
		97,
		105,
		114,
		95,
		84,
		86,
		49,
		49,
		0,
		183,
		192,
		242,
		74,
		101,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		0,
		149,
		173,
		169,
		206,
		127,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		66,
		76,
		75,
		95,
		82,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		66,
		76,
		75,
		95,
		82,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		46,
		70,
		95,
		77,
		69,
		68,
		95,
		66,
		76,
		75,
		95,
		82,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
		};

		// Token: 0x04000AC3 RID: 2755
		private static byte[] byte_5 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		67,
		111,
		108,
		111,
		114,
		83,
		119,
		97,
		116,
		99,
		104,
		101,
		115,
		47,
		83,
		107,
		105,
		110,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		73,
		83,
		46,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		73,
		83,
		0,
		167,
		232,
		113,
		89,
		71,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		115,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		95,
		84,
		86,
		49,
		49,
		0,
		182,
		250,
		152,
		111,
		93,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		72,
		97,
		105,
		114,
		95,
		84,
		86,
		49,
		49,
		0,
		49,
		174,
		97,
		197,
		118,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		101,
		100,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		97,
		116,
		101,
		114,
		105,
		97,
		108,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		72,
		97,
		105,
		114,
		95,
		84,
		86,
		49,
		49,
		46,
		70,
		95,
		77,
		69,
		68,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		72,
		97,
		105,
		114,
		95,
		84,
		86,
		49,
		49,
		0,
		183,
		192,
		242,
		74,
		101,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		0,
		149,
		173,
		169,
		206,
		127,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		80,
		108,
		97,
		121,
		101,
		114,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		47,
		77,
		101,
		100,
		105,
		117,
		109,
		47,
		72,
		101,
		97,
		100,
		115,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		47,
		77,
		101,
		115,
		104,
		47,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49,
		46,
		70,
		95,
		77,
		69,
		68,
		95,
		72,
		73,
		83,
		95,
		82,
		97,
		109,
		105,
		114,
		101,
		122,
		95,
		72,
		101,
		97,
		100,
		95,
		48,
		49
		};

		// Token: 0x04000AC4 RID: 2756
		private static byte[] byte_6 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		65,
		99,
		99,
		101,
		115,
		115,
		111,
		114,
		105,
		101,
		115,
		47,
		72,
		97,
		116,
		115,
		47,
		77,
		101,
		115,
		104,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		48,
		54,
		46,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		48,
		54,
		0,
		219,
		166,
		243,
		8,
		55,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		115,
		47,
		72,
		97,
		116,
		115,
		47,
		72,
		97,
		116,
		95,
		70,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		48,
		55,
		0,
		116,
		239,
		11,
		12,
		20,
		0,
		0,
		0,
		47,
		83,
		99,
		114,
		105,
		112,
		116,
		47,
		67,
		111,
		114,
		101,
		85,
		79,
		98,
		106,
		101,
		99,
		116,
		0,
		248,
		73,
		45,
		62,
		21,
		0,
		0,
		0,
		47,
		83,
		99,
		114,
		105,
		112,
		116,
		47,
		70,
		111,
		114,
		116,
		110,
		105,
		116,
		101,
		71,
		97,
		109,
		101,
		0,
		132,
		195,
		18,
		218,
		15,
		0,
		0,
		0,
		65,
		100,
		100,
		105,
		116,
		105,
		111,
		110,
		97,
		108,
		68,
		97,
		116,
		97,
		0,
		221,
		137,
		249,
		153,
		17,
		0,
		0,
		0,
		65,
		116,
		116,
		97,
		99,
		104,
		83,
		111,
		99,
		107,
		101,
		116,
		78,
		97,
		109,
		101,
		0,
		115,
		155,
		223,
		205,
		13,
		0,
		0,
		0,
		66,
		121,
		116,
		101,
		80,
		114,
		111,
		112,
		101,
		114,
		116,
		121,
		0,
		230,
		78,
		45,
		192,
		18,
		0,
		0,
		0,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		84,
		121,
		112,
		101,
		0,
		42,
		181,
		67,
		229,
		6,
		0,
		0,
		0,
		67,
		108,
		97,
		115,
		115,
		0,
		116,
		119,
		120,
		145,
		23,
		0,
		0,
		0,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		72,
		97,
		116,
		68,
		97,
		116,
		97,
		0,
		241,
		151,
		244,
		210,
		20,
		0,
		0,
		0,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		0,
		142,
		107,
		192,
		186,
		32,
		0,
		0,
		0,
		68,
		101,
		102,
		97,
		117,
		108,
		116,
		95,
		95,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		72,
		97,
		116,
		68,
		97,
		116,
		97,
		0,
		188,
		27,
		66,
		216,
		29,
		0,
		0,
		0,
		68,
		101,
		102,
		97,
		117,
		108,
		116,
		95,
		95,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		0,
		143,
		39,
		133,
		30,
		15,
		0,
		0,
		0,
		69,
		67,
		117,
		115,
		116,
		111,
		109,
		72,
		97,
		116,
		84,
		121,
		112,
		101,
		0,
		114,
		163,
		164,
		153,
		19,
		0,
		0,
		0,
		69,
		67,
		117,
		115,
		116,
		111,
		109,
		72,
		97,
		116,
		84,
		121,
		112,
		101,
		95,
		72,
		97,
		116
		};

		// Token: 0x04000AC5 RID: 2757
		private static byte[] byte_7 = new byte[]
		{
		47,
		71,
		97,
		109,
		101,
		47,
		65,
		99,
		99,
		101,
		115,
		115,
		111,
		114,
		105,
		101,
		115,
		47,
		72,
		97,
		116,
		115,
		47,
		77,
		101,
		115,
		104,
		47,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		48,
		55,
		46,
		70,
		101,
		109,
		97,
		108,
		101,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		48,
		55,
		0,
		219,
		166,
		243,
		8,
		55,
		0,
		0,
		0,
		47,
		71,
		97,
		109,
		101,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		115,
		47,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		115,
		47,
		72,
		97,
		116,
		115,
		47,
		72,
		97,
		116,
		95,
		70,
		95,
		67,
		111,
		109,
		109,
		97,
		110,
		100,
		111,
		95,
		48,
		55,
		0,
		116,
		239,
		11,
		12,
		20,
		0,
		0,
		0,
		47,
		83,
		99,
		114,
		105,
		112,
		116,
		47,
		67,
		111,
		114,
		101,
		85,
		79,
		98,
		106,
		101,
		99,
		116,
		0,
		248,
		73,
		45,
		62,
		21,
		0,
		0,
		0,
		47,
		83,
		99,
		114,
		105,
		112,
		116,
		47,
		70,
		111,
		114,
		116,
		110,
		105,
		116,
		101,
		71,
		97,
		109,
		101,
		0,
		132,
		195,
		18,
		218,
		15,
		0,
		0,
		0,
		65,
		100,
		100,
		105,
		116,
		105,
		111,
		110,
		97,
		108,
		68,
		97,
		116,
		97,
		0,
		221,
		137,
		249,
		153,
		17,
		0,
		0,
		0,
		65,
		116,
		116,
		97,
		99,
		104,
		83,
		111,
		99,
		107,
		101,
		116,
		78,
		97,
		109,
		101,
		0,
		115,
		155,
		223,
		205,
		13,
		0,
		0,
		0,
		66,
		121,
		116,
		101,
		80,
		114,
		111,
		112,
		101,
		114,
		116,
		121,
		0,
		230,
		78,
		45,
		192,
		18,
		0,
		0,
		0,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		84,
		121,
		112,
		101,
		0,
		42,
		181,
		67,
		229,
		6,
		0,
		0,
		0,
		67,
		108,
		97,
		115,
		115,
		0,
		116,
		119,
		120,
		145,
		23,
		0,
		0,
		0,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		72,
		97,
		116,
		68,
		97,
		116,
		97,
		0,
		241,
		151,
		244,
		210,
		20,
		0,
		0,
		0,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		0,
		142,
		107,
		192,
		186,
		32,
		0,
		0,
		0,
		68,
		101,
		102,
		97,
		117,
		108,
		116,
		95,
		95,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		72,
		97,
		116,
		68,
		97,
		116,
		97,
		0,
		188,
		27,
		66,
		216,
		29,
		0,
		0,
		0,
		68,
		101,
		102,
		97,
		117,
		108,
		116,
		95,
		95,
		67,
		117,
		115,
		116,
		111,
		109,
		67,
		104,
		97,
		114,
		97,
		99,
		116,
		101,
		114,
		80,
		97,
		114,
		116,
		0,
		143,
		39,
		133,
		30,
		15,
		0,
		0,
		0,
		69,
		67,
		117,
		115,
		116,
		111,
		109,
		72,
		97,
		116,
		84,
		121,
		112,
		101,
		0,
		114,
		163,
		164,
		153,
		19,
		0,
		0,
		0,
		69,
		67,
		117,
		115,
		116,
		111,
		109,
		72,
		97,
		116,
		84,
		121,
		112,
		101,
		95,
		67,
		97,
		112
		};

		private void convert_Click(object sender, EventArgs e)
		{
			string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

			if (!File.Exists(filePath))
			{
				paks a = new paks(); a.ShowDialog();
				return;
			}
			CheckForIllegalCrossThreadCalls = false;
			change1Bytes.RunWorkerAsync();
		}

		private void revert_Click(object sender, EventArgs e)
		{
			string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

			if (!File.Exists(filePath))
			{
				paks a = new paks(); a.ShowDialog();
				return;
			}
			CheckForIllegalCrossThreadCalls = false;
			revert1Bytes.RunWorkerAsync();
		}
	}
}
