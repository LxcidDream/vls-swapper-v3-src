using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Globalization;
using MaterialSkin;
using MaterialSkin.Controls;
using vls_swapper_v3.Properties;
using vls_swapper_v3.IO;
using vls_swapper_v3.main.popups;

namespace vls_swapper_v3.Emotes
{
    public partial class deufaltraiders : MaterialForm
    {

        Point lastPoint;
        CultureInfo culture = CultureInfo.CurrentUICulture;
        string enable = Resources.enabled;
        string disabled = Resources.disabled;
        string actsomewhelse = Resources.alreadydone;
        string paksinvalid = Resources.pathinvalid;
        string error = Resources.error;
        MaterialSkinManager skinManager = MaterialSkinManager.Instance;
        public deufaltraiders()
        {
            InitializeComponent(); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon)); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon));
            skinManager.AddFormToManage(this);
            skinManager.Theme = MaterialSkinManager.Themes.DARK;
            bool enabledmode =! Settings.Default.ismode;if (enabledmode){skinManager.ColorScheme = new ColorScheme(Primary.DeepPurple500, Primary.Grey900, Primary.Grey900, Accent.DeepPurple400, TextShade.WHITE);}else{skinManager.ColorScheme = new ColorScheme(Primary.Pink500, Primary.Grey900, Primary.Grey900, Accent.Pink400, TextShade.WHITE);}
            this.Text = "Raiders Revenge";
            bool enabled = Settings.Default.deufaltraiders;
            if (enabled)
            {
                revert.Enabled = true;
                convert.Enabled = false;
            }
            else
            {
                revert.Enabled = false;
                convert.Enabled = true;

            }

            change1Bytes.DoWork += ChangeBytes_DoWork;
            revert1Bytes.DoWork += RevertBytes_DoWork;
        }

        



        private void RevertBytes_DoWork(object sender, DoWorkEventArgs e)
        {
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
			int offsetcue = Settings.Default.offseticons;
            if (revert1Bytes.CancellationPending)
            {
                e.Cancel = true;
                return;
            }

            revert.Enabled = false;

             RichTextBoxInfo.Text = "";RichTextBoxInfo.Text += "[LOG] Starting...";

            Stopwatch sw = new Stopwatch();
            sw.Start();

            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";



            Stream fs1 = File.OpenRead(filePath);

            foreach (long s in Researcher.FindPosition(fs1, 0, offsetpickmesh, RaidersMesh))
            {
                fs1.Close();
                BinaryWriter binaryWrite = new BinaryWriter((Stream)File.Open(filePath, FileMode.Open, FileAccess.ReadWrite));
                binaryWrite.BaseStream.Seek(s + 0L, SeekOrigin.Begin);
                binaryWrite.Write(DefaultMesh);
                binaryWrite.Close();
                RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Pickaxe 1/2 removed!";
                Settings.Default.deufaltraiders = false;
                Settings.Default.Save();
            }

            Stream fs2 = File.OpenRead(filePath);

            foreach (long s in Researcher.FindPosition(fs2, 0, offsetcue, RaidersCue))
            {
                fs2.Close();
                BinaryWriter binaryWrite = new BinaryWriter((Stream)File.Open(filePath, FileMode.Open, FileAccess.ReadWrite));
                binaryWrite.BaseStream.Seek(s + 0L, SeekOrigin.Begin);
                binaryWrite.Write(DefaultCue);
                binaryWrite.Close();
                RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Pickaxe 2/2 removed!";
            }



            revert.Enabled = false;
            convert.Enabled = true;
            sw.Stop();
            double elapsed = sw.Elapsed.Seconds;
			RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Done!";
		}

        private void ChangeBytes_DoWork(object sender, DoWorkEventArgs e)
        {
            

           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
			int offsetcue = Settings.Default.offseticons;
			convert.Enabled = false;

             RichTextBoxInfo.Text = "";RichTextBoxInfo.Text += "[LOG] Starting...";

            Stopwatch sw = new Stopwatch();
            sw.Start();

            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            Stream fs1 = File.OpenRead(filePath);

            foreach (long s in Researcher.FindPosition(fs1, 0, offsetpickmesh, DefaultMesh))
            {
                fs1.Close();
                BinaryWriter binaryWrite = new BinaryWriter((Stream)File.Open(filePath, FileMode.Open, FileAccess.ReadWrite));
                binaryWrite.BaseStream.Seek(s + 0L, SeekOrigin.Begin);
                binaryWrite.Write(RaidersMesh);
                binaryWrite.Close();
                Settings.Default.deufaltraiders = true;
                Settings.Default.Save();
                RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Pickaxe 1/2 added!";
            }

            Stream fs2 = File.OpenRead(filePath);

            foreach (long s in Researcher.FindPosition(fs2, 0, offsetcue, DefaultCue))
            {
                fs2.Close();
                BinaryWriter binaryWrite = new BinaryWriter((Stream)File.Open(filePath, FileMode.Open, FileAccess.ReadWrite));
                binaryWrite.BaseStream.Seek(s + 0L, SeekOrigin.Begin);
                binaryWrite.Write(RaidersCue);
                binaryWrite.Close();
                RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Pickaxe 2/2 added!";
            }

            revert.Enabled = true;
            convert.Enabled = false;
            sw.Stop();
            double elapsed = sw.Elapsed.Seconds;
			RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Done!";
		}

        private void convert_Click(object sender, EventArgs e)
        {
            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            if (!File.Exists(filePath))
            {
                paks a = new paks(); a.ShowDialog();
                return;
            }
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
            change1Bytes.RunWorkerAsync();
        }

        private void revert_Click(object sender, EventArgs e)
        {
            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            if (!File.Exists(filePath))
            {
                paks a = new paks(); a.ShowDialog();
                return;
            }
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
            revert1Bytes.RunWorkerAsync();
        }



		private static byte[] DefaultMesh = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			70,
			79,
			82,
			84,
			95,
			77,
			101,
			108,
			101,
			101,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			95,
			77,
			97,
			114,
			107,
			73,
			73,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			83,
			75,
			95,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			95,
			77,
			97,
			114,
			107,
			95,
			73,
			73,
			46,
			83,
			75,
			95,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			95,
			77,
			97,
			114,
			107,
			95,
			73,
			73
		};

		// Token: 0x04000816 RID: 2070
		private static byte[] RaidersMesh = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			70,
			79,
			82,
			84,
			95,
			77,
			101,
			108,
			101,
			101,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			83,
			75,
			95,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			80,
			111,
			115,
			116,
			65,
			112,
			111,
			99,
			97,
			108,
			121,
			112,
			116,
			105,
			99,
			46,
			83,
			75,
			95,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			80,
			111,
			115,
			116,
			65,
			112,
			111,
			99,
			97,
			108,
			121,
			112,
			116,
			105,
			99,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000817 RID: 2071
		private static byte[] DefaultCue = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			69,
			113,
			117,
			105,
			112,
			95,
			67,
			117,
			101,
			46,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			69,
			113,
			117,
			105,
			112,
			95,
			67,
			117,
			101,
			0,
			138,
			242,
			11,
			246,
			76,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			67,
			117,
			101,
			0,
			18,
			65,
			37,
			228,
			105,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			67,
			117,
			101,
			46,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			67,
			117,
			101,
			0,
			174,
			41,
			49,
			21,
			75,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			67,
			117,
			101,
			0,
			96,
			13,
			232,
			30,
			103,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			67,
			117,
			101,
			46,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			67,
			117,
			101
		};

		// Token: 0x04000818 RID: 2072
		private static byte[] RaidersCue = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			95,
			76,
			111,
			99,
			107,
			106,
			97,
			119,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			65,
			116,
			104,
			101,
			110,
			97,
			95,
			67,
			117,
			101,
			46,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			95,
			76,
			111,
			99,
			107,
			106,
			97,
			119,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			65,
			116,
			104,
			101,
			110,
			97,
			95,
			67,
			117,
			101,
			0,
			138,
			242,
			11,
			246,
			76,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			67,
			117,
			101,
			0,
			18,
			65,
			37,
			228,
			105,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			70,
			111,
			114,
			116,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			70,
			108,
			101,
			115,
			104,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			80,
			65,
			95,
			76,
			111,
			99,
			107,
			74,
			97,
			119,
			95,
			67,
			117,
			101,
			46,
			80,
			108,
			97,
			121,
			101,
			114,
			95,
			73,
			109,
			112,
			97,
			99,
			116,
			95,
			80,
			65,
			95,
			76,
			111,
			99,
			107,
			74,
			97,
			119,
			95,
			67,
			117,
			101,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			174,
			41,
			49,
			21,
			75,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			47,
			80,
			105,
			99,
			107,
			97,
			120,
			101,
			95,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			86,
			50,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			67,
			117,
			101,
			0,
			96,
			10,
			232,
			30,
			103,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			83,
			111,
			117,
			110,
			100,
			115,
			47,
			87,
			101,
			97,
			112,
			111,
			110,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			115,
			47,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			95,
			76,
			111,
			99,
			107,
			106,
			97,
			119,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			65,
			116,
			104,
			101,
			110,
			97,
			95,
			67,
			117,
			101,
			46,
			80,
			105,
			99,
			107,
			65,
			120,
			101,
			95,
			76,
			111,
			99,
			107,
			106,
			97,
			119,
			95,
			83,
			119,
			105,
			110,
			103,
			95,
			65,
			116,
			104,
			101,
			110,
			97,
			95,
			67,
			117,
			101
		};
	}
}
