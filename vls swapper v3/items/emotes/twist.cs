
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Globalization;
using MaterialSkin;
using MaterialSkin.Controls;
using vls_swapper_v3.Properties;
using vls_swapper_v3.main.popups;
using vls_swapper_v3.IO;

namespace vls_swapper_v3.Emotes
{
    public partial class twist : MaterialForm
    {

        Point lastPoint;
        CultureInfo culture = CultureInfo.CurrentUICulture;
        string enable = Resources.enabled;
        string disabled = Resources.disabled;
        string actsomewhelse = Resources.alreadydone;
        string paksinvalid = Resources.pathinvalid;
        string error = Resources.error;
        MaterialSkinManager skinManager = MaterialSkinManager.Instance;
        public twist()
        {
            InitializeComponent(); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon)); Icon = ((System.Drawing.Icon)(Resources.tumblr_aa9595fd4142b5c8982167f16ee70617_7e8b2860_640_yVE_icon));
            skinManager.AddFormToManage(this);
            skinManager.Theme = MaterialSkinManager.Themes.DARK;
            bool enabledmode =! Settings.Default.ismode;if (enabledmode){skinManager.ColorScheme = new ColorScheme(Primary.DeepPurple500, Primary.Grey900, Primary.Grey900, Accent.DeepPurple400, TextShade.WHITE);}else{skinManager.ColorScheme = new ColorScheme(Primary.Pink500, Primary.Grey900, Primary.Grey900, Accent.Pink400, TextShade.WHITE);}
            this.Text = "twist";
            bool enabled = Settings.Default.twistedenabled;
            if (enabled)
            {
                revert.Enabled = true;
                convert.Enabled = false;
            }
            else
            {
                revert.Enabled = false;
                convert.Enabled = true;

            }

            change1Bytes.DoWork += ChangeBytes_DoWork;
            revert1Bytes.DoWork += RevertBytes_DoWork;
        }

        private void bunifuImageButton4_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Left += e.X - lastPoint.X;
                this.Top += e.Y - lastPoint.Y;
            }
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            lastPoint = new Point(e.X, e.Y);
        }

        private void label5_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Left += e.X - lastPoint.X;
                this.Top += e.Y - lastPoint.Y;
            }
        }

        private void label5_MouseDown(object sender, MouseEventArgs e)
        {
            lastPoint = new Point(e.X, e.Y);
        }

        



        private void RevertBytes_DoWork(object sender, DoWorkEventArgs e)
        {
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;

            if (revert1Bytes.CancellationPending)
            {
                e.Cancel = true;
                return;
            }

            revert.Enabled = false;

             RichTextBoxInfo.Text = "";RichTextBoxInfo.Text += "[LOG] Starting...";

            Stopwatch sw = new Stopwatch();
            sw.Start();

            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";



            Stream fs1 = File.OpenRead(filePath);

            foreach (long s in Researcher.FindPosition(fs1, 0, offsetemote, bb2))
            {
                fs1.Close();
                BinaryWriter binaryWrite = new BinaryWriter((Stream)File.Open(filePath, FileMode.Open, FileAccess.ReadWrite));
                binaryWrite.BaseStream.Seek(s + 0L, SeekOrigin.Begin);
                binaryWrite.Write(bb1);
                binaryWrite.Close();
                RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Dance removed!";
                Settings.Default.twistedenabled = false;
                Settings.Default.Save();
            }

            



            revert.Enabled = false;
            convert.Enabled = true;
            sw.Stop();
            double elapsed = sw.Elapsed.Seconds;
			RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Done!";
		}

        private void ChangeBytes_DoWork(object sender, DoWorkEventArgs e)
        {
           

           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;

            convert.Enabled = false;

             RichTextBoxInfo.Text = "";RichTextBoxInfo.Text += "[LOG] Starting...";

            Stopwatch sw = new Stopwatch();
            sw.Start();

            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            Stream fs1 = File.OpenRead(filePath);

            foreach (long s in Researcher.FindPosition(fs1, 0, offsetemote, bb1))
            {
                fs1.Close();
                BinaryWriter binaryWrite = new BinaryWriter((Stream)File.Open(filePath, FileMode.Open, FileAccess.ReadWrite));
                binaryWrite.BaseStream.Seek(s + 0L, SeekOrigin.Begin);
                binaryWrite.Write(bb2);
                binaryWrite.Close();
                Settings.Default.twistedenabled = true;
                Settings.Default.Save();
                RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Dance added!";
            }

            

            revert.Enabled = true;
            convert.Enabled = false;
            sw.Stop();
            double elapsed = sw.Elapsed.Seconds;
			RichTextBoxInfo.Text = RichTextBoxInfo.Text + "\n[LOG] Done!";
		}

        private void convert_Click(object sender, EventArgs e)
        {
            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            if (!File.Exists(filePath))
            {
                paks a = new paks(); a.ShowDialog();
                return;
            }
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
            Dance i = new Dance(); i.ShowDialog();
            change1Bytes.RunWorkerAsync();
        }

        private void revert_Click(object sender, EventArgs e)
        {
            string filePath = Options.GetPaksFolder + "\\pakchunk10_s2-WindowsClient.pak";

            if (!File.Exists(filePath))
            {
                paks a = new paks(); a.ShowDialog();
                return;
            }
           CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
            revert1Bytes.RunWorkerAsync();
        }


		private static byte[] bb2 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			47,
			71,
			97,
			109,
			101,
			47,
			77,
			97,
			105,
			110,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			119,
			105,
			115,
			116,
			47,
			69,
			109,
			111,
			116,
			101,
			95,
			84,
			119,
			105,
			115,
			116,
			95,
			67,
			77,
			70,
			95,
			77,
			46,
			69,
			109,
			111,
			116,
			101,
			95,
			84,
			119,
			105,
			115,
			116,
			95,
			67,
			77,
			70,
			95,
			77,
			0,
			0,
			0,
			0,
			209,
			177,
			148,
			158,
			65,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			47,
			71,
			97,
			109,
			101,
			47,
			77,
			97,
			105,
			110,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			66,
			97,
			110,
			97,
			110,
			97,
			47,
			69,
			109,
			111,
			116,
			101,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			95,
			67,
			77,
			77,
			95,
			77,
			0,
			6,
			240,
			138,
			77,
			84,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			47,
			71,
			97,
			109,
			101,
			47,
			77,
			97,
			105,
			110,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			119,
			105,
			115,
			116,
			47,
			69,
			109,
			111,
			116,
			101,
			95,
			84,
			119,
			105,
			115,
			116,
			95,
			67,
			77,
			77,
			95,
			77,
			46,
			69,
			109,
			111,
			116,
			101,
			95,
			84,
			119,
			105,
			115,
			116,
			95,
			67,
			77,
			77,
			95,
			77,
			0,
			0,
			0,
			0,
			79,
			12,
			186,
			168,
			47,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			73,
			116,
			101,
			109,
			115,
			47,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			47,
			68,
			97,
			110,
			99,
			101,
			115,
			47,
			69,
			73,
			68,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			0,
			185,
			28,
			182,
			177,
			65,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			0,
			70,
			27,
			72,
			61,
			67,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			45,
			76,
			0,
			250,
			70,
			213,
			34,
			92,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			84,
			119,
			105,
			115,
			116,
			45,
			76,
			46,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			84,
			119,
			105,
			115,
			116,
			45,
			76,
			0,
			0,
			0,
			byte.MaxValue,
			228,
			141,
			53,
			88,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			84,
			119,
			105,
			115,
			116,
			46,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			84,
			119,
			105,
			115,
			116,
			0,
			0,
			0,
			79,
			106,
			85,
			195,
			20,
			0,
			0,
			0,
			47,
			83,
			99,
			114,
			105,
			112,
			116,
			47,
			67,
			111,
			114,
			101,
			85,
			79,
			98,
			106,
			101,
			99,
			116,
			0,
			248,
			73,
			45,
			62,
			21,
			0,
			0,
			0,
			47,
			83,
			99,
			114,
			105,
			112,
			116,
			47,
			70,
			111,
			114,
			116,
			110,
			105,
			116,
			101,
			71,
			97,
			109,
			101,
			0,
			132,
			195,
			18,
			218,
			21,
			0,
			0,
			0,
			47,
			83,
			99,
			114,
			105,
			112,
			116,
			47,
			71,
			97,
			109,
			101,
			112,
			108,
			97,
			121,
			84,
			97,
			103,
			115,
			0,
			247,
			85,
			203,
			109,
			10,
			0,
			0,
			0,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			0,
			180,
			113,
			200,
			196,
			24,
			0,
			0,
			0,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			70,
			101,
			109,
			97,
			108,
			101,
			79,
			118,
			101,
			114,
			114,
			105,
			100,
			101,
			0,
			204,
			142,
			130,
			103,
			26,
			0,
			0,
			0,
			65,
			116,
			104,
			101,
			110,
			97,
			68,
			97,
			110,
			99,
			101,
			73,
			116,
			101,
			109,
			68,
			101,
			102,
			105,
			110,
			105,
			116,
			105,
			111,
			110,
			0,
			39,
			17,
			186,
			147,
			15,
			0,
			0,
			0,
			98,
			72,
			111,
			108,
			115,
			116,
			101,
			114,
			87,
			101,
			97,
			112,
			111,
			110,
			0,
			96,
			55,
			98,
			174,
			13,
			0,
			0,
			0,
			66,
			111,
			111,
			108,
			80,
			114,
			111,
			112,
			101,
			114,
			116,
			121,
			0,
			16,
			4,
			176,
			138,
			6,
			0,
			0,
			0,
			67,
			108,
			97,
			115,
			115,
			0,
			116,
			119,
			120,
			145,
			26,
			0,
			0,
			0,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			46,
			69,
			109,
			111,
			116,
			101,
			84,
			121,
			112,
			101,
			46,
			68,
			97,
			110,
			99,
			101,
			0,
			162,
			157,
			33,
			182,
			26,
			0,
			0,
			0,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			46,
			70,
			105,
			108,
			116,
			101,
			114,
			46,
			83,
			101,
			97,
			115,
			111,
			110,
			46,
			53,
			0,
			68,
			217,
			148,
			67,
			21,
			0,
			0,
			0,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			46,
			83,
			101,
			116,
			46,
			49,
			50,
			100,
			102
		};

		// Token: 0x040001FD RID: 509
		private static byte[] bb1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			47,
			71,
			97,
			109,
			101,
			47,
			77,
			97,
			105,
			110,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			66,
			97,
			110,
			97,
			110,
			97,
			47,
			69,
			109,
			111,
			116,
			101,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			95,
			67,
			77,
			70,
			95,
			77,
			46,
			69,
			109,
			111,
			116,
			101,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			95,
			67,
			77,
			70,
			95,
			77,
			0,
			209,
			177,
			148,
			158,
			65,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			47,
			71,
			97,
			109,
			101,
			47,
			77,
			97,
			105,
			110,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			66,
			97,
			110,
			97,
			110,
			97,
			47,
			69,
			109,
			111,
			116,
			101,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			95,
			67,
			77,
			77,
			95,
			77,
			0,
			6,
			240,
			138,
			77,
			84,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			47,
			71,
			97,
			109,
			101,
			47,
			77,
			97,
			105,
			110,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			66,
			97,
			110,
			97,
			110,
			97,
			47,
			69,
			109,
			111,
			116,
			101,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			95,
			67,
			77,
			77,
			95,
			77,
			46,
			69,
			109,
			111,
			116,
			101,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			95,
			67,
			77,
			77,
			95,
			77,
			0,
			79,
			12,
			186,
			168,
			47,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			65,
			116,
			104,
			101,
			110,
			97,
			47,
			73,
			116,
			101,
			109,
			115,
			47,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			47,
			68,
			97,
			110,
			99,
			101,
			115,
			47,
			69,
			73,
			68,
			95,
			66,
			97,
			110,
			97,
			110,
			97,
			0,
			185,
			28,
			182,
			177,
			65,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			0,
			70,
			27,
			72,
			61,
			67,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			45,
			76,
			0,
			250,
			70,
			213,
			34,
			92,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			45,
			76,
			46,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			45,
			76,
			0,
			byte.MaxValue,
			228,
			141,
			53,
			88,
			0,
			0,
			0,
			47,
			71,
			97,
			109,
			101,
			47,
			85,
			73,
			47,
			70,
			111,
			117,
			110,
			100,
			97,
			116,
			105,
			111,
			110,
			47,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			47,
			73,
			99,
			111,
			110,
			115,
			47,
			69,
			109,
			111,
			116,
			101,
			115,
			47,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			46,
			84,
			45,
			73,
			99,
			111,
			110,
			45,
			69,
			109,
			111,
			116,
			101,
			115,
			45,
			69,
			45,
			66,
			97,
			110,
			97,
			110,
			97,
			0,
			79,
			106,
			85,
			195,
			20,
			0,
			0,
			0,
			47,
			83,
			99,
			114,
			105,
			112,
			116,
			47,
			67,
			111,
			114,
			101,
			85,
			79,
			98,
			106,
			101,
			99,
			116,
			0,
			248,
			73,
			45,
			62,
			21,
			0,
			0,
			0,
			47,
			83,
			99,
			114,
			105,
			112,
			116,
			47,
			70,
			111,
			114,
			116,
			110,
			105,
			116,
			101,
			71,
			97,
			109,
			101,
			0,
			132,
			195,
			18,
			218,
			21,
			0,
			0,
			0,
			47,
			83,
			99,
			114,
			105,
			112,
			116,
			47,
			71,
			97,
			109,
			101,
			112,
			108,
			97,
			121,
			84,
			97,
			103,
			115,
			0,
			247,
			85,
			203,
			109,
			10,
			0,
			0,
			0,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			0,
			180,
			113,
			200,
			196,
			24,
			0,
			0,
			0,
			65,
			110,
			105,
			109,
			97,
			116,
			105,
			111,
			110,
			70,
			101,
			109,
			97,
			108,
			101,
			79,
			118,
			101,
			114,
			114,
			105,
			100,
			101,
			0,
			204,
			142,
			130,
			103,
			26,
			0,
			0,
			0,
			65,
			116,
			104,
			101,
			110,
			97,
			68,
			97,
			110,
			99,
			101,
			73,
			116,
			101,
			109,
			68,
			101,
			102,
			105,
			110,
			105,
			116,
			105,
			111,
			110,
			0,
			39,
			17,
			186,
			147,
			15,
			0,
			0,
			0,
			98,
			72,
			111,
			108,
			115,
			116,
			101,
			114,
			87,
			101,
			97,
			112,
			111,
			110,
			0,
			96,
			55,
			98,
			174,
			13,
			0,
			0,
			0,
			66,
			111,
			111,
			108,
			80,
			114,
			111,
			112,
			101,
			114,
			116,
			121,
			0,
			16,
			4,
			176,
			138,
			6,
			0,
			0,
			0,
			67,
			108,
			97,
			115,
			115,
			0,
			116,
			119,
			120,
			145,
			26,
			0,
			0,
			0,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			46,
			69,
			109,
			111,
			116,
			101,
			84,
			121,
			112,
			101,
			46,
			68,
			97,
			110,
			99,
			101,
			0,
			162,
			157,
			33,
			182,
			26,
			0,
			0,
			0,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			46,
			70,
			105,
			108,
			116,
			101,
			114,
			46,
			83,
			101,
			97,
			115,
			111,
			110,
			46,
			56,
			0,
			68,
			217,
			148,
			67,
			21,
			0,
			0,
			0,
			67,
			111,
			115,
			109,
			101,
			116,
			105,
			99,
			115,
			46,
			83,
			101,
			116,
			46,
			66,
			97,
			110,
			97
		};
	}
}
